@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
@:ViewData["Title"] = "@Model.ViewName";
if (!string.IsNullOrEmpty(Model.LayoutPageFile))
{
    @:Layout = "@Model.LayoutPageFile";
}
@:}
@:
@:
    }
    else
    {
@:@@{
@:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
@:<meta name="viewport" content="width=device-width" />
@:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
//    PushIndent("    ");
}
}
<section class="content">
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="card card-danger">
                <div class="card-header">
                    <h3 class="card-title">Are you sure you want to delete this?</h3>
                </div>
                <!-- /.card-header -->
                <div class="card-body">
                    <dl class="dl-horizontal">
                        @{
                            Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                            Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

                            foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                            {
                                if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                    && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                                {
                                    <dt>
                                        @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                                    </dt>
                                    <dd>
                                        @@Html.DisplayFor(model => model.@GetValueExpression(property))
                                    </dd>
                                }
                                else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                                {
                                    <dt>
                                        @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                                    </dt>
                                    <dd>
                                        @@Html.DisplayFor(model => model.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                                    </dd>
                                }
                            }
                        @:</dl>
                    @:</div>
                    @:<div class="card-footer">
                        @:<form asp-action="@Model.ViewName">
                            foreach (var property in Model.ModelMetadata.Properties)
                            {
                                if (property.IsPrimaryKey)
                                {
                                    @:<input type="hidden" asp-for="@GetValueExpression(property)" />
                                }
                            }
                            @:<input type="submit" value="Delete" class="btn btn-danger" /> 
                            @:<a class="btn btn-default" asp-action="Index">Back to List</a>
                        @:</form>
                    @:</div>
                @:</div>
            @:</div>
        @:</div>
    @:</div>
@:</section>
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
        @:</body>
@:</html>
}
                            }
                            @functions
{
                                string GetValueExpression(IPropertyMetadata property)
                                {
                                    return property.PropertyName;
                                }

                                string GetValueExpression(INavigationMetadata navigation)
                                {
                                    return navigation.AssociationPropertyName;
                                }
                            }
